import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import torch.autograd as autograd


import pandas as pd
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.metrics import mean_squared_error
from sklearn.utils import shuffle
from scipy.spatial.transform import Rotation
import matplotlib.pyplot as plt

from pickle import load
from pickle import dump

global count
#import pdb; pdb.set_trace() #this is completely overpowered. Too useful.



input_scaler = StandardScaler()
output_scaler = StandardScaler()


def print_c_network(md, input_scaler, output_scaler):
  output = "//#include \"solver.h\"\n//Auto Generated by pretrain.py\n\nvoid Solver::load_nn_gc_model(){\n"
  torch.set_printoptions(threshold=10000)
  for c in md.keys():
    temp = str(c)
    name = temp[2:] + temp[0]
    output += ((str(md[c].flatten()).replace("tensor([", name + " << ").replace("])", ";")) + "\n")
  
  output += "out_mean " + str(output_scaler.mean_.tolist()).replace("[","<< ").replace("]", ";") + "\n"
  output += "out_std " + str(np.sqrt(output_scaler.var_).tolist()).replace("[","<< ").replace("]", ";") + "\n"
  
  output += "in_mean " + str(input_scaler.mean_.tolist()).replace("[","<< ").replace("]", ";") + "\n"
  output += "in_std_inv " + str(np.sqrt(input_scaler.var_).tolist()).replace("[","<< ").replace("]", ";") + "\n"
  
  output += "in_std_inv = in_std_inv.cwiseInverse();\n}"
  #print(output)
  with open('solver_nn_gc.cpp','w') as f:
    f.write(output)
  return


def process_data():
    #slip is vx - tire speed
    in_features = ['vx','vy','vz','w','zr']
    out_features = ['Fx','Fy','Fz']

    df = pd.read_csv("../data/tire_data.csv")
    data_x = np.array(df[in_features])
    #data_temp = np.zeros((data_x.shape[0], 4))
    #data_temp[:,0] = data_x[0] - data_x[3]
    #data_temp[:,1] = data_x[1]
    #data_temp[:,2] = data_x[2]
    #data_temp[:,3] = data_x[4]
    
    data_y = np.array(df[out_features])
    
    data_x = input_scaler.fit_transform(data_x)
    data_y = output_scaler.fit_transform(data_y)
    
    data_len = data_x.shape[0]
    
    train_data = data_x[:int(data_len*.95),:]
    label_data = data_y[:int(data_len*.95),:]
    train_data_len = train_data.shape[0]
    
    train_data, label_data = shuffle(train_data, label_data, random_state=1)    
    
    test_data = data_x[int(data_len*.95):,:]
    test_labels = data_y[int(data_len*.95):,:]
    
    
    np.save("../data/train_data", train_data)
    np.save("../data/label_data", label_data)

    np.save("../data/test_data", test_data)
    np.save("../data/test_labels", test_labels)
    
    dump(input_scaler, open('../data/input_scaler.pkl', 'wb'))
    dump(output_scaler, open('../data/output_scaler.pkl', 'wb'))
    




print("processing data")
process_data()
print("done processing data")

train_data = np.load("../data/train_data.npy")
label_data = np.load("../data/label_data.npy")

train_data = torch.from_numpy(train_data).float()
label_data = torch.from_numpy(label_data).float()

test_data = np.load("../data/test_data.npy")
test_labels = np.load("../data/test_labels.npy")

test_data = torch.from_numpy(test_data).float()
test_labels = torch.from_numpy(test_labels).float()

input_scaler = load(open('../data/input_scaler.pkl', 'rb'))
output_scaler = load(open('../data/output_scaler.pkl', 'rb'))

print("train data size ", train_data.size())
print("label data size ", label_data.size())
print("has gpu? ", torch.cuda.is_available())





in_size = 5
hidden_size = 16
out_size = 3

loss_fn = torch.nn.MSELoss()
model = nn.Sequential(
  nn.Linear(in_size, hidden_size),
  nn.Tanh(),
  nn.Linear(hidden_size, hidden_size),
  nn.Tanh(),
#  nn.Linear(hidden_size, hidden_size),
#  nn.Tanh(),
  nn.Linear(hidden_size, out_size)
)

opt = torch.optim.Adam(model.parameters(), lr=1e-1)

count = 0
def fit(lr, batch_size, epochs):
    global count
    
    for param_group in opt.param_groups:
        param_group['lr'] = lr
    
    for j in range(epochs):
        for i in range(0, train_data.shape[0]-batch_size, batch_size):
            x = train_data[i:i+batch_size, :]
            y = label_data[i:i+batch_size, :]
            
            opt.zero_grad()
            y_hat = model.forward(x)
            loss = loss_fn(y_hat, y)
            loss.backward()
            opt.step()
        plt.scatter(count, loss.item(), color='b')
        count += 1
        print("LOSS", loss)


def test_network(idx):
    yhat = output_scaler.inverse_transform(model.cpu().forward(test_data.cpu()).detach().numpy())
    y_actual = output_scaler.inverse_transform(test_labels.cpu().detach().numpy())
    
    plt.plot(yhat[:,idx])
    plt.plot(y_actual[:,idx])
    plt.show()


def test_features():
  temp = input_scaler.inverse_transform(test_data.cpu());
  feature_vec = test_data.cpu()[0,:]#.reshape((-1,1))
  print(temp[0,:])
  
  label_vec = output_scaler.inverse_transform(model.cpu().forward(feature_vec).detach().numpy())
  print(label_vec)

    

def get_evaluation_loss():
    predicted = model.cpu().forward(test_data.cpu()).detach().numpy()
    predicted_force = output_scaler.inverse_transform(predicted)
    actual_force = output_scaler.inverse_transform(test_labels.cpu().detach().numpy())
    
    mean0 = np.mean(np.square(predicted_force[:,0] - actual_force[:,0]))
    mean1 = np.mean(np.square(predicted_force[:,1] - actual_force[:,1]))
    mean2 = np.mean(np.square(predicted_force[:,2] - actual_force[:,2]))
    print(np.sqrt((mean0+mean1+mean2)/3.0))





model_name = "../data/tire2.net"
md = torch.load(model_name)
model.load_state_dict(md)

#fit(1e-3, 1000, 500)
#fit(1e-4, 1000, 200)
#fit(1e-4, 1000, 100)
#fit(1e-4, 50, 100)
#plt.show()

#test_network(0)
#test_network(1)
#test_network(2)
#test_network(3)
get_evaluation_loss()

#test_features()

md = model.state_dict()
torch.save(md, model_name)

print_c_network(md, input_scaler, output_scaler)
