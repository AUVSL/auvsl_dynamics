#include "NNJackalModel.h"


//Auto Generated by pretrain4.py
Eigen::Matrix<Scalar,NNJackalModel::num_hidden_nodes,NNJackalModel::num_in_features> NNJackalModel::weight0;
Eigen::Matrix<Scalar,NNJackalModel::num_hidden_nodes,1> NNJackalModel::bias0;
Eigen::Matrix<Scalar,NNJackalModel::num_hidden_nodes,NNJackalModel::num_hidden_nodes> NNJackalModel::weight2;
Eigen::Matrix<Scalar,NNJackalModel::num_hidden_nodes,1> NNJackalModel::bias2;
Eigen::Matrix<Scalar,NNJackalModel::num_out_features,NNJackalModel::num_hidden_nodes> NNJackalModel::weight4;
Eigen::Matrix<Scalar,NNJackalModel::num_out_features,1> NNJackalModel::bias4;
Eigen::Matrix<Scalar,NNJackalModel::num_out_features,1> NNJackalModel::out_mean;
Eigen::Matrix<Scalar,NNJackalModel::num_out_features,1> NNJackalModel::out_std;
Eigen::Matrix<Scalar,NNJackalModel::num_in_features,1> NNJackalModel::in_mean;
Eigen::Matrix<Scalar,NNJackalModel::num_in_features,1> NNJackalModel::in_std;


void NNJackalModel::load_nn_model(){
  weight0 << 0.5070381760597229f, 0.5478394627571106f, 0.19592203199863434f, 0.399358868598938f, -0.2253984808921814f, 0.15027426183223724f, -0.03286164626479149f, -0.32976171374320984f, -0.2408188283443451f, -0.509578287601471f, 0.13330841064453125f, -0.22473503649234772f, -0.13323701918125153f, 0.10970692336559296f, -0.1385277956724167f, -0.0431583970785141f, -0.2579737901687622f, -0.13053956627845764f, -0.23424389958381653f, 0.12666894495487213f, 0.2344539612531662f, -0.13802078366279602f, 0.07093959301710129f, -0.20808111131191254f, -0.02208906039595604f, 0.0439339317381382f, -0.08864486217498779f, -0.015937374904751778f, 0.030446508899331093f, 0.10765015333890915f, 0.05958423763513565f, -0.016047382727265358f, 0.034938178956508636f, -0.07641886174678802f, 0.2888484001159668f, -0.0005203756154514849f, 0.07571401447057724f, 0.05058940500020981f, 0.036092814058065414f, -0.08637694269418716f, -0.18871895968914032f, 0.16553542017936707f, 0.1103610098361969f, -0.04412034898996353f, -0.05783170089125633f, 0.05487392470240593f, -0.09060265868902206f, 0.030864594504237175f, 0.19352105259895325f, -0.023307504132390022f, -0.017553245648741722f, 0.24240580201148987f, 0.11698660254478455f, 0.0795663520693779f, 0.22447344660758972f, -0.1673874855041504f, -0.03440457955002785f, -0.11585023999214172f, -0.12957024574279785f, -0.1938636749982834f, 0.013748080469667912f, -0.1121029257774353f, 0.16502538323402405f, -0.17025500535964966f, 0.13351717591285706f, 0.2524735927581787f, 0.08780483901500702f, 0.048695746809244156f, -0.11119041591882706f, 0.09247133135795593f, -0.06465370953083038f, 0.03188552334904671f, -0.0901355892419815f, 0.001399134169332683f, 0.06893052160739899f, 0.027302775532007217f, 0.003680603113025427f, -0.1360916942358017f, -0.09644769132137299f, -0.0030948908533900976f, 0.3142298758029938f, -0.2839534878730774f, 0.07661443948745728f, -0.2153022289276123f, 0.06706874072551727f, 0.0074494886212050915f, -0.15065036714076996f, 0.10522890836000443f, -0.0752296969294548f, 0.09031710028648376f, 0.16571585834026337f, -0.10990593582391739f, 0.046958841383457184f, -0.1494966596364975f, -0.14648760855197906f, 0.2416696697473526f, -0.019552700221538544f, 0.1814858466386795f, -0.09082382917404175f, 0.04603661969304085f, 0.02348674274981022f, 0.11858437210321426f, -0.09978583455085754f, 0.167399600148201f, -0.07256554812192917f, 0.08740062266588211f, 0.03715589642524719f, -0.13612978160381317f, 0.05917968600988388f, -0.1798335462808609f, 0.016071002930402756f, 0.16791805624961853f, 0.23939937353134155f, 0.1349239945411682f, -0.1761714220046997f, 0.001616489957086742f, -0.23055687546730042f, -0.08978036046028137f, -0.2205592542886734f, -0.16037343442440033f, -0.13524915277957916f, 0.018790634348988533f, 0.2410827875137329f, 0.10019011795520782f, 0.2772734463214874f, -0.06613706052303314f, -0.0001812940026866272f, 0.07686526328325272f, -0.2985260486602783f, 0.3445579409599304f, -0.13831521570682526f, 0.2031298577785492f, 0.08184710890054703f, 0.012322762981057167f, -0.04647060111165047f, -0.037202946841716766f, -0.03379743546247482f, -0.040374718606472015f, 0.01055341400206089f, -0.046247512102127075f, -0.035354647785425186f, 0.06429306417703629f, 0.002098971512168646f, 0.03497875854372978f, -0.18119972944259644f, 0.004854021593928337f, 0.0317610427737236f, -0.16942119598388672f, -0.1259012073278427f, 0.032106418162584305f, -0.06452317535877228f, 0.10889502614736557f, -0.08791673183441162f, 0.1514633446931839f, 0.024778710678219795f, 0.06312547624111176f, 0.10973624885082245f, -0.21277816593647003f, 0.06010224297642708f, 0.005985332187265158f;
  bias0 << 0.5580949187278748f, 0.305050790309906f, 0.1247653216123581f, -0.18577155470848083f, 0.24781978130340576f, -0.1685991883277893f, 0.4686298072338104f, -0.21082346141338348f, -0.6341767311096191f, -0.271369993686676f;
  weight2 << 0.16355682909488678f, 0.31805846095085144f, 0.17351125180721283f, -0.07567073404788971f, 0.7294444441795349f, -0.6873682737350464f, 0.6546921133995056f, -0.1450611650943756f, -0.05602572485804558f, -0.4211914837360382f, -0.16524581611156464f, -0.29325070977211f, -0.1333378404378891f, 0.09726038575172424f, 0.037533827126026154f, -0.3658100962638855f, 0.25357678532600403f, 0.1328987032175064f, 0.24739135801792145f, -0.008020088076591492f, -0.06475811451673508f, 0.0431242510676384f, -0.03396568447351456f, -0.06293374300003052f, 0.17723681032657623f, -0.40250617265701294f, -0.30811500549316406f, 0.01799878291785717f, 0.4217573404312134f, 0.3266626000404358f, 0.08781079947948456f, 0.3126661479473114f, -0.3104807138442993f, 0.2958424389362335f, -0.18521597981452942f, 0.03616180270910263f, -0.4353334605693817f, -0.029681112617254257f, 0.1325046569108963f, 0.27060365676879883f, -0.22025950253009796f, -0.5022398829460144f, 0.13539886474609375f, 0.13348008692264557f, 0.23172521591186523f, 0.02058015950024128f, -0.04363086074590683f, 0.4294630289077759f, 0.1574617475271225f, -0.46732616424560547f, 0.5441858172416687f, 0.5711138248443604f, -0.46548786759376526f, -0.5028584599494934f, 0.32324305176734924f, -0.21848896145820618f, 0.6755355000495911f, 0.2096315324306488f, -0.09292958676815033f, 0.19773252308368683f, 0.48382943868637085f, 0.19441458582878113f, -0.3186139762401581f, -0.060256846249103546f, -0.23990947008132935f, 0.30966290831565857f, -0.1329910159111023f, -0.0654413253068924f, -0.3304154872894287f, 0.37624630331993103f, 0.43322989344596863f, -0.11145919561386108f, -0.04132242128252983f, -0.2917099893093109f, -0.4093373715877533f, 0.06969714164733887f, -0.24556170403957367f, -0.028863118961453438f, -0.1702011525630951f, 0.28479325771331787f, 0.36620816588401794f, -0.33968058228492737f, 0.35991036891937256f, 0.4413430094718933f, 0.19690841436386108f, -0.3326335549354553f, 0.3975144326686859f, -0.18586745858192444f, -0.8032094240188599f, -0.6872453689575195f, -0.31047409772872925f, -0.18862001597881317f, -0.011446249671280384f, 0.3120187520980835f, -0.08067098259925842f, -0.030997464433312416f, 0.12049273401498795f, 0.29474368691444397f, -0.39404234290122986f, -0.24614223837852478f;
  bias2 << 0.33773449063301086f, 0.14037692546844482f, -0.04018498212099075f, 0.020190777257084846f, -0.2269674688577652f, 0.2102840393781662f, 0.4939185678958893f, 0.053244639188051224f, 0.40160733461380005f, -0.07341230660676956f;
  weight4 << 0.7142202854156494f, 0.4513903558254242f, -0.30634602904319763f, -0.3388822376728058f, 1.0876628160476685f, -0.38776347041130066f, -0.5574929118156433f, -0.7955678701400757f, 0.7776758074760437f, 0.7287275791168213f, -0.1482779085636139f, 0.1537615954875946f, -0.3086024522781372f, -0.3536171019077301f, -0.14610783755779266f, -0.42892614006996155f, 0.4749014377593994f, 0.14941100776195526f, -0.0665622353553772f, -0.015165886841714382f, 0.20084244012832642f, 0.8295740485191345f, 0.7409592866897583f, -0.08738353103399277f, -0.352787584066391f, 0.7706308960914612f, -0.708607017993927f, -0.4584459662437439f, -0.23503194749355316f, -0.9222180247306824f;
  bias4 << -0.22141967713832855f, -0.06830868870019913f, -0.052076227962970734f;
  out_mean << 0.864554095128939, 0.00029328516541568924, 0.0630675224008439;
  out_std << 0.3113082304148629, 0.07850687587921731, 0.6771573831218609;
  in_mean << 9.289211910089596, 9.623938261278045, 9.28916929894657, 9.623899521581544, 9.289133144419628, 9.62388015173329, 9.289109903124853, 9.623843997206349, 9.28905308616488, 9.623818170742014, 9.288991105173604, 9.62379234427768, 9.288952365477103, 9.623723906670321, 9.288907169164519, 9.623709700853373;
  in_std << 3.5764614380046473, 3.759343128186388, 3.576571398809485, 3.759441653305539, 3.5766647003521403, 3.759490561016079, 3.576724462325123, 3.7595821103954385, 3.5768710386347053, 3.7596477893167357, 3.5770309457277243, 3.7597132511952496, 3.5771307198278897, 3.759887102844223, 3.577247061378591, 3.7599228552794095;
}

Eigen::Matrix<Scalar,NNJackalModel::num_out_features,1> NNJackalModel::forward(Eigen::Matrix<Scalar,NNJackalModel::num_in_features,1> features){
  Eigen::Matrix<Scalar,NNJackalModel::num_hidden_nodes,1> layer0_out;
  Eigen::Matrix<Scalar,NNJackalModel::num_hidden_nodes,1> layer2_out;
  Eigen::Matrix<Scalar,NNJackalModel::num_out_features,1> layer4_out;
  Eigen::Matrix<Scalar,NNJackalModel::num_out_features,1> labels;
  Eigen::Matrix<Scalar,NNJackalModel::num_in_features,1> scaled_features;
  
  scaled_features = (features - in_mean).cwiseQuotient(in_std);
  layer0_out = (weight0*scaled_features) + bias0;
  layer0_out = layer0_out.unaryExpr(&tanhf);
  layer2_out = (weight2*layer0_out) + bias2;
  layer2_out = layer2_out.unaryExpr(&tanhf);
  layer4_out = (weight4*layer2_out) + bias4;        
  labels = layer4_out.cwiseProduct(out_std) + out_mean;

  return labels;
}
 
